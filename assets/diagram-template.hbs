<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <style>
{{{cssContent}}}
    </style>
</head>
<body>
    <h1>{{title}}</h1>
    
{{#each rules}}
    <div class="syntax-rule" id="syntax-rule-{{sanitizeId name}}">
        <h2>{{name}}</h2>
        <p><code>{{name}} := {{original}}</code></p>
        <div class="diagram-container">
            {{{svg}}}
        </div>
    </div>
{{/each}}

    <footer style="margin-top: 2rem; padding: 1rem; border-top: 1px solid #ccc; color: #666;">
        <p>Generated from ABNF grammar using abnf-to-railroad tool</p>
    </footer>

    <script>
        // Add grid pattern to all SVG elements
        function addGridToSVGs() {
            const svgs = document.querySelectorAll('svg');
            const gridSize = 16; // Match the grid size from the renderer
            const patternId = 'grid-pattern'; // Same ID in each SVG
            
            svgs.forEach((svg) => {
                // Create defs element if it doesn't exist, append at end
                let defs = svg.querySelector('defs');
                if (!defs) {
                    defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                    svg.appendChild(defs); // Add at end instead of beginning
                }
                
                // Create pattern element in each SVG's defs
                const pattern = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');
                pattern.setAttribute('id', patternId);
                pattern.setAttribute('patternUnits', 'userSpaceOnUse');
                pattern.setAttribute('width', gridSize);
                pattern.setAttribute('height', gridSize);
                
                // Create thin grid lines
                function createGridLine(x1, y1, x2, y2) {
                    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                    line.setAttribute('x1', x1);
                    line.setAttribute('y1', y1);
                    line.setAttribute('x2', x2);
                    line.setAttribute('y2', y2);
                    line.setAttribute('stroke', 'hotpink');
                    line.setAttribute('stroke-width', '0.5');
                    line.setAttribute('opacity', '0.3');
                    pattern.appendChild(line);
                }

                // Create horizontal lines
                createGridLine(0, 0, 5, 0);
                createGridLine(gridSize-5, 0, gridSize, 0);
                
                // Create vertical line
                createGridLine(0, 0, 0, 5);
                createGridLine(0, gridSize-5, 0, gridSize);
                
             
                defs.appendChild(pattern);
                
                // Create background rectangle and append at end
                const background = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                background.setAttribute('x', '0');
                background.setAttribute('y', '0');
                background.setAttribute('width', '100%');
                background.setAttribute('height', '100%');
                background.setAttribute('fill', `url(#${patternId})`);
                background.setAttribute('class', 'grid-background');
                
                // Append background at the end of the SVG
                svg.appendChild(background);
            });
        }
        
        // Add grid when DOM is loaded
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', addGridToSVGs);
        } else {
            addGridToSVGs();
        }
        
        // Optional: Add toggle functionality
        document.addEventListener('keydown', function(e) {
            if (e.key === 'g' && e.ctrlKey) {
                e.preventDefault();
                const gridElements = document.querySelectorAll('.grid-background');
                gridElements.forEach(grid => {
                    grid.style.display = grid.style.display === 'none' ? '' : 'none';
                });
            }
        });
    </script>
</body>
</html>